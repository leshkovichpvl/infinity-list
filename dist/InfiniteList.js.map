{"version":3,"file":"InfiniteList.js","sourceRoot":"","sources":["../src/InfiniteList.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { List as VirtualList } from 'react-virtualized/dist/commonjs/List';\nimport { AutoSizer } from 'react-virtualized/dist/commonjs/AutoSizer';\nimport { InfiniteLoader } from 'react-virtualized/dist/commonjs/InfiniteLoader';\nimport { LoadableDataRecord } from './LoadableDataRecord';\nimport { LoadableDataObject } from './LoadableDataObject';\nimport { CustomScrollBar } from './CustomScrollBar';\n\nexport interface IInfiniteListProps {\n    loadableData: LoadableDataRecord<any> | LoadableDataObject<any>;\n    rowHeight: number;\n    requestMore: (startIndex: number, stopIndex: number) => any;\n    elementCreator: (item: any, style: React.CSSProperties) => JSX.Element;\n    emptyElementCreator: (index: number, style: React.CSSProperties) => JSX.Element;\n}\n\nexport class InfiniteList extends React.PureComponent<IInfiniteListProps, undefined> {\n\n    private _virtualList: VirtualList;\n\n    render() {\n        const {loadableData, rowHeight} = this.props;\n\n        return <AutoSizer>\n            {({height, width}) =>\n                <InfiniteLoader\n                    isRowLoaded={this.isRowLoaded}\n                    loadMoreRows={this.loadMoreRows}\n                    rowCount={loadableData.dataCount}\n                >\n                    {({onRowsRendered}) => (\n                        <CustomScrollBar\n                            width={width}\n                            height={height}\n                            handleScroll={this.handleScroll}\n                        >\n                            <VirtualList\n                                {...loadableData.packs}\n                                height={height}\n                                width={width}\n                                onRowsRendered={onRowsRendered}\n                                ref={r => this._virtualList = r}\n                                rowCount={loadableData.dataCount}\n                                rowHeight={rowHeight}\n                                rowRenderer={this.rowRenderer}\n                                style={defaultListStyle}\n                            />\n                        </CustomScrollBar>\n                    )}\n                </InfiniteLoader>\n            }\n        </AutoSizer>;\n    }\n\n    private isRowLoaded = ({index}) => this.props.loadableData.hasIndex(index);\n\n    private loadMoreRows = async ({startIndex, stopIndex}) => {\n\n        if (this.props.loadableData.hasIndex([startIndex, stopIndex])) {\n            throw new Error(`Fail LoadMore wrong indexes startIndex ${startIndex} or stopIndex ${stopIndex}`);\n        }\n\n        this.props.requestMore(startIndex, stopIndex);\n\n        return awaiter(() => this.props.loadableData.hasIndex(stopIndex));\n    };\n\n    private handleScroll = ({target}) => {\n        const {scrollTop, scrollLeft} = target;\n\n        const {Grid} = this._virtualList;\n\n        Grid.handleScrollEvent({scrollTop, scrollLeft});\n    };\n\n    private rowRenderer = ({index, style}) => {\n        const item = this.props.loadableData.findByIndex(index);\n\n        if (null === item) {\n            return this.props.emptyElementCreator(index, style);\n        }\n\n        return this.props.elementCreator(item, style);\n    };\n}\n\nconst defaultListStyle: React.CSSProperties = {overflowX: 'initial', overflowY: 'initial'};\n\nconst awaiter = (isCompleted: () => boolean) => {\n    const _await = resolve => setTimeout(() => {\n        if (isCompleted()) {\n            resolve();\n            return;\n        }\n        _await(resolve);\n    }, 0);\n    return new Promise(resolve => _await(resolve));\n};\n"]}