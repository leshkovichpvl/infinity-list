{"version":3,"file":"watchRequestMore.js","sourceRoot":"","sources":["../src/watchRequestMore.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAmC;AACnC,8CAAoG;AAGpG,0BAAkC,WAAsC,EAAE,MAAM,EAAE,OAAO;;;;;;;;;oCAIjD,qBAAM,cAAI,CAAC,MAAM,CAAC,EAAA;;gCAA5C,KAA0B,SAAkB,EAA3C,UAAU,gBAAA,EAAE,SAAS,eAAA;qCAExB,IAAI,EAAJ,wBAAI;gCACJ,qBAAM,gBAAM,CAAC,IAAI,CAAC,EAAA;;gCAAlB,SAAkB,CAAC;;oCAGhB,qBAAM,cAAI,CAAC;;;oDACd,qBAAM,cAAI,CAAC,kBAAK,EAAE,GAAG,CAAC,EAAA;;gDAAtB,SAAsB,CAAC;gDAEvB,qBAAM,cAAI,CAAC,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC,EAAA;;gDAAvD,SAAuD,CAAC;;;;iCAC3D,CAAC,EAAA;;gCAJF,IAAI,GAAG,SAIL,CAAC;;;;;;;qBAXA,IAAI;;;;;;;;CAad;AAhBD,4CAgBC","sourcesContent":["import { delay } from 'redux-saga';\nimport { call, cancel, CancelEffect, fork, ForkEffect, take, TakeEffect } from 'redux-saga/effects';\nimport * as autobahn from 'autobahn';\n\nexport function* watchRequestMore(WAMPSession: Promise<autobahn.Session>, action, handler) {\n    let task;\n\n    while (true) {\n        const {startIndex, stopIndex} = yield take(action);\n\n        if (task) {\n            yield cancel(task);\n        }\n\n        task = yield fork(function* () {\n            yield call(delay, 500);\n\n            yield call(handler, startIndex, stopIndex, WAMPSession);\n        });\n    }\n}\n"]}