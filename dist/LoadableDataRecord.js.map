{"version":3,"file":"LoadableDataRecord.js","sourceRoot":"","sources":["../src/LoadableDataRecord.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,uCAAyC;AAEzC;IAA+C,0CAI7C;IAJF;;IAkCA,CAAC;IAzBU,qCAAc,GAArB,UAAyB,UAAkB,EAAE,SAAiB,EAAE,KAAc;QAC1E,OAAO,IAAI,sBAAsB,CAAI,EAAC,UAAU,YAAA,EAAE,SAAS,WAAA,EAAE,KAAK,OAAA,EAAC,CAAC,CAAC;IACzE,CAAC;IAED,yCAAQ,GAAR,UAAS,KAAa;QAClB,OAAO,CAAC,CAAC,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;IAED,wCAAO,GAAP,UAAQ,KAAa;QACjB,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAEjD,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;IAED,iDAAgB,GAAhB,UAAiB,KAAS;QAAT,sBAAA,EAAA,SAAS;QACvB,OAAO,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC;IACnG,CAAC;IAED,oCAAG,GAAH,UAAyB,CAAI,EAAE,CAAI;QAC/B,OAAmC,iBAAM,GAAG,YAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC;IAEO,yCAAQ,GAAhB;QACI,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC/E,CAAC;IAAA,CAAC;IACN,6BAAC;AAAD,CAAC,AAlCD,CAA+C,kBAAM,CAAC;IAClD,UAAU,EAAE,KAAK,CAAC;IAClB,SAAS,EAAE,KAAK,CAAC;IACjB,KAAK,EAAE,gBAAI,EAAE;CAChB,CAAC,GA8BD;AAlCY,wDAAsB;AAoCnC;IAA2C,sCAGzC;IAHF;;IAiFA,CAAC;IA1EU,iCAAc,GAArB,UAAyB,SAAiB,EAAE,KAAsC;QAC9E,OAAO,IAAI,kBAAkB,CAAI,EAAC,SAAS,WAAA,EAAE,KAAK,OAAA,EAAC,CAAC,CAAC;IACzD,CAAC;IAEM,qCAAkB,GAAzB;QACI,OAAO,IAAI,kBAAkB,CAAI,EAAC,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE,gBAAI,EAAE,EAAC,CAAC,CAAC;IACpE,CAAC;IAED,oCAAO,GAAP,UAAQ,IAA+B;QAEnC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE;YAClD,MAAM,IAAI,KAAK,CAAC,6CAA2C,IAAI,CAAC,UAAU,sBAAiB,IAAI,CAAC,SAAW,CAAC,CAAC;SAChH;QAED,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,yCAAY,GAAZ,UAAa,KAAa;QACtB,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;IAED,wCAAW,GAAX,UAAY,IAAa;QAErB,OAAO,IAAI,CAAC,GAAG,CACX,OAAO,EACP,IAAI,CAAC,KAAK;aACL,MAAM,CAAC,UAAC,OAAwC,EAAE,IAA+B,IAAK,OAAA,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAA3D,CAA2D,EAAE,gBAAI,EAAE,CAAC;aAC1J,OAAO,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,CAC9E,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,uCAAU,GAAV,UAAW,IAAO;QAEd,OAAO,IAAI,CAAC,GAAG,CACX,OAAO,EACP,IAAI,CAAC,KAAK;aACL,MAAM,CAAC,UAAC,OAAwC,EAAE,IAA+B,IAAK,OAAA,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,EAAlD,CAAkD,EAAE,gBAAI,EAAE,CAAC;aACjJ,OAAO,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,gBAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAC1E,CAAC,kBAAkB,EAAE,CAAC;IAC3B,CAAC;IAED,+CAAkB,GAAlB,UAAmB,KAAS;QAAT,sBAAA,EAAA,SAAS;QACxB,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC;IACrD,CAAC;IAED,oCAAO,GAAP;QACI,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,UAAC,IAAa,EAAE,IAA+B,IAAK,OAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAhC,CAAgC,EAAE,gBAAI,EAAE,CAAC,CAAC;IACtI,CAAC;IAED,wCAAW,GAAX,UAAY,KAAa;QACrB,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAExC,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC7C,CAAC;IAED,qCAAQ,GAAR,UAAS,KAAgC;QAErC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACf,IAAA,qBAAU,EAAE,oBAAS,CAAU;YAEtC,OAAO,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;SAChF;QAED,OAAO,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAED,gCAAG,GAAH,UAAyB,CAAI,EAAE,CAAI;QAC/B,OAA+B,iBAAM,GAAG,YAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC;IAEO,2CAAc,GAAtB,UAAuB,KAAa;QAChC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAA5B,CAA4B,CAAC,CAAC;IACjE,CAAC;IAAA,CAAC;IAEN,yBAAC;AAAD,CAAC,AAjFD,CAA2C,kBAAM,CAAC;IAC9C,SAAS,EAAE,KAAK,CAAC;IACjB,KAAK,EAAE,gBAAI,EAAE;CAChB,CAAC,GA8ED;AAjFY,gDAAkB","sourcesContent":["import { List, Record } from 'immutable';\n\nexport class LoadableDataPackRecord<T> extends Record({\n    startIndex: void 0,\n    stopIndex: void 0,\n    items: List()\n}) {\n    readonly startIndex: number;\n    readonly stopIndex: number;\n    readonly items: List<T>;\n\n    static createInstance<T>(startIndex: number, stopIndex: number, items: List<T>) {\n        return new LoadableDataPackRecord<T>({startIndex, stopIndex, items});\n    }\n\n    hasIndex(index: number) {\n        return -1 !== this.getRange().indexOf(index);\n    }\n\n    getItem(index: number): T {\n        const pathIndex = this.getRange().indexOf(index);\n\n        return this.items.get(pathIndex);\n    }\n\n    incrementIndexes(count = 1): LoadableDataPackRecord<T> {\n       return this.set('startIndex', this.startIndex + count).set('stopIndex', this.stopIndex + count);\n    }\n\n    set<K extends string, V>(k: K, v: V): LoadableDataPackRecord<T> {\n        return <LoadableDataPackRecord<T>> super.set(k, v);\n    }\n\n    private getRange(): number[] {\n        return Array.from(Array(this.stopIndex + 1).keys()).slice(this.startIndex);\n    };\n}\n\nexport class LoadableDataRecord<T> extends Record({\n    dataCount: void 0,\n    packs: List()\n}) {\n    readonly dataCount: number;\n    readonly packs: List<LoadableDataPackRecord<T>>;\n\n    static createInstance<T>(dataCount: number, packs: List<LoadableDataPackRecord<T>>) {\n        return new LoadableDataRecord<T>({dataCount, packs});\n    }\n\n    static createNullInstance<T>() {\n        return new LoadableDataRecord<T>({dataCount: 0, packs: List()});\n    }\n\n    addPack(pack: LoadableDataPackRecord<T>): LoadableDataRecord<T> {\n\n        if (this.hasIndex([pack.startIndex, pack.stopIndex])) {\n            throw new Error(`Fail Add Pack: wrong indexes startIndex ${pack.startIndex} or stopIndex ${pack.stopIndex}`);\n        }\n\n        return this.set('packs', this.packs.concat([pack]));\n    }\n\n    setDataCount(count: number): LoadableDataRecord<T> {\n        return this.set('dataCount', count);\n    }\n\n    unShiftList(list: List<T>): LoadableDataRecord<T> {\n\n        return this.set(\n            'packs',\n            this.packs\n                .reduce((newList: List<LoadableDataPackRecord<T>>, pack: LoadableDataPackRecord<T>) => newList.concat([pack.incrementIndexes(list.size)]).toList(), List())\n                .unshift(LoadableDataPackRecord.createInstance(0, list.size - 1, list))\n        ).incrementDataCount(list.size);\n    }\n\n    unShiftOne(item: T): LoadableDataRecord<T> {\n\n        return this.set(\n            'packs',\n            this.packs\n                .reduce((newList: List<LoadableDataPackRecord<T>>, pack: LoadableDataPackRecord<T>) => newList.concat([pack.incrementIndexes()]).toList(), List())\n                .unshift(LoadableDataPackRecord.createInstance(0, 0, List([item])))\n        ).incrementDataCount();\n    }\n\n    incrementDataCount(count = 1): LoadableDataRecord<T> {\n        return this.setDataCount(this.dataCount + count);\n    }\n\n    getList(): List<T> {\n        return this.packs.valueSeq().reduce((list: List<T>, pack: LoadableDataPackRecord<T>) => list.concat(pack.items).toList(), List());\n    }\n\n    findByIndex(index: number): T | null {\n        const pack = this.getPackByIndex(index);\n\n        return pack ? pack.getItem(index) : null;\n    }\n\n    hasIndex(value: number | [number, number]) {\n\n        if (Array.isArray(value)) {\n            const [startIndex, stopIndex] = value;\n\n            return !!this.getPackByIndex(startIndex) || !!this.getPackByIndex(stopIndex);\n        }\n\n        return !!this.getPackByIndex(value);\n    }\n\n    set<K extends string, V>(k: K, v: V): LoadableDataRecord<T> {\n        return <LoadableDataRecord<T>> super.set(k, v);\n    }\n\n    private getPackByIndex(index: number): LoadableDataPackRecord<T> | void {\n        return this.packs.find(pack => pack && pack.hasIndex(index));\n    };\n\n}\n"]}